// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cctable/microservices/keystone/server_grpc/proto/token.proto

package proto

import (
	pb "cctable/common/libs/micro/pb"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("cctable/microservices/server/keystone/server_grpc/proto/token.proto", fileDescriptor_512137b670f477ff)
}

var fileDescriptor_512137b670f477ff = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0xce, 0x3d, 0xcf, 0x82, 0x40,
	0x0c, 0x07, 0xf0, 0x67, 0x22, 0x4f, 0x08, 0x26, 0x86, 0x91, 0xd1, 0x0f, 0x40, 0xa3, 0xae, 0x2e,
	0xe8, 0xe6, 0xa8, 0x4e, 0x2e, 0x84, 0xab, 0xff, 0x28, 0x01, 0xae, 0xe7, 0xf5, 0x34, 0xe1, 0xdb,
	0x1b, 0x38, 0x9d, 0xfa, 0x96, 0x5f, 0xdb, 0x74, 0xc7, 0x1c, 0x1a, 0xd3, 0x83, 0x86, 0x96, 0xbd,
	0x28, 0xfc, 0xbb, 0x65, 0x28, 0x75, 0x18, 0x35, 0x88, 0x05, 0x4d, 0x1d, 0xf8, 0xfa, 0xee, 0x1d,
	0x93, 0xf3, 0x12, 0x84, 0x82, 0x74, 0xb0, 0xe5, 0x9c, 0x17, 0xf4, 0xd3, 0x2c, 0xc3, 0x20, 0x96,
	0xfa, 0xd6, 0x68, 0xdc, 0x44, 0xce, 0xd0, 0x84, 0x6a, 0xd7, 0x8c, 0xbd, 0x34, 0xb7, 0x08, 0x36,
	0x55, 0x9a, 0x5d, 0x26, 0x7f, 0x8e, 0x87, 0xf2, 0x75, 0xba, 0x3c, 0x3c, 0xc0, 0x5d, 0xc5, 0x0c,
	0xd5, 0x79, 0x94, 0x67, 0xe5, 0x51, 0xc5, 0x9e, 0xf0, 0x7c, 0x41, 0x43, 0xb1, 0xf8, 0x56, 0xea,
	0xc4, 0x2a, 0x56, 0x7f, 0xfb, 0xff, 0x6b, 0x12, 0x3f, 0x31, 0xc9, 0x1c, 0xb6, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x76, 0x02, 0x9d, 0xb4, 0xc4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TokenServiceClient is the client API for TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenServiceClient interface {
	CheckAccessToken(ctx context.Context, in *pb.JsonRequest, opts ...grpc.CallOption) (*pb.JsonResponse, error)
}

type tokenServiceClient struct {
	cc *grpc.ClientConn
}

func NewTokenServiceClient(cc *grpc.ClientConn) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) CheckAccessToken(ctx context.Context, in *pb.JsonRequest, opts ...grpc.CallOption) (*pb.JsonResponse, error) {
	out := new(pb.JsonResponse)
	err := c.cc.Invoke(ctx, "/TokenService/CheckAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServiceServer is the server API for TokenService service.
type TokenServiceServer interface {
	CheckAccessToken(context.Context, *pb.JsonRequest) (*pb.JsonResponse, error)
}

// UnimplementedTokenServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTokenServiceServer struct {
}

func (*UnimplementedTokenServiceServer) CheckAccessToken(ctx context.Context, req *pb.JsonRequest) (*pb.JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAccessToken not implemented")
}

func RegisterTokenServiceServer(s *grpc.Server, srv TokenServiceServer) {
	s.RegisterService(&_TokenService_serviceDesc, srv)
}

func _TokenService_CheckAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.JsonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).CheckAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenService/CheckAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).CheckAccessToken(ctx, req.(*pb.JsonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAccessToken",
			Handler:    _TokenService_CheckAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cctable/microservices/server/keystone/server_grpc/proto/token.proto",
}
